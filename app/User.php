<?php

namespace App;

use Illuminate\Notifications\Notifiable;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Database\Eloquent\Builder;

class User extends Authenticatable implements MustVerifyEmail
{
    use Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'password',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];
//    protected $attributes=['active'=>false];
//    protected $table='test';
//    public function getRouteKeyName()
//    {
//        return 'name';
//    }

//    public function resolveRouteBinding($value)
//    {
////        return parent::resolveRouteBinding($value); // TODO: Change the autogenerated stub
//        return $this->where('email',$value)->first() ?? abort(404);
//    }

//    public function getRouteKeyName()
//    {
////        return parent::getRouteKeyName(); // TODO: Change the autogenerated stub
//        return 'name'; // TODO: Change the autogenerated stub
//    }

//public scope
//    protected static function boot()
//    {
//        parent::boot();
//
//        static::addGlobalScope(new Scopes\AgeScope);
//    }

    // anoymous scope
//    protected static function boot()
//    {
//        parent::boot();
//
//        static::addGlobalScope('id', function (Builder $builder) {
//            $builder->where('id', '>', 4);
//        });
//    }

//local scope
//public function scopeName($query){
//    return $query->where('id','>',4);
//}

// dynamic scope
//public function scopeOfType($query,$type){
//    return $query->where('name',$type);
//}

public function phone(){
return $this->hasOne('App\Phone');
}
public function posts(){
    return $this->hasMany('App\Post');
}
public function roles(){
//    return $this->belongsToMany('App\Role')->withPivot('desc');
//    return $this->belongsToMany('App\Role')->withTimestamps();
//    return $this->belongsToMany('App\Role')->as('test')->withPivot('desc');  //customize pivote to become any name
//    return $this->belongsToMany('App\Role')->withPivot('desc')->wherePivot('desc','ahmed');
    return $this->belongsToMany('App\Role')->withPivot('desc')->wherePivotIn('desc',['ahmed','ali']);
}

}
